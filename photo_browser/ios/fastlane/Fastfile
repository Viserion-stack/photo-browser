default_platform(:ios)

require 'securerandom'

# Default temporary keychain password and name, if not included from environment
TEMP_KEYCHAIN_NAME_DEFAULT = "fastlane_photo_browser_flutter"
TEMP_KEYCHAIN_PASSWORD_DEFAULT = SecureRandom.hex

# Remove the temporary keychain, if it exists
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

# Create the temporary keychain with name and password
def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

# Ensure we have a fresh, empty temporary keychain
def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Nukes certificates"
  lane :nuke do |options|
    app_store_connect_api_key()

    match_nuke(
      type: options[:type],
    )
  end

  desc "Match App Store Certificates"
  lane :certificates do |options|
    app_store_connect_api_key()

    match(
      type: options[:type],
      readonly: options[:readonly],
      force: options[:force],
      force_for_new_devices: true,
      generate_apple_certs: false,
      app_identifier: ["com.photos", "com.photos.alpha", "com.photos.beta"]
    )
  end

  desc "Build & sign iOS Alpha (development) for Firebase App Distribution"
  lane :build_fad_ios_alpha do
    app_store_connect_api_key()

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./Runner.xcodeproj",
    )

    ensure_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT, TEMP_KEYCHAIN_PASSWORD_DEFAULT)

    match(
      keychain_name: TEMP_KEYCHAIN_NAME_DEFAULT,
      keychain_password: TEMP_KEYCHAIN_PASSWORD_DEFAULT,
      force_for_new_devices: true,
      type: 'adhoc',
      app_identifier: ["com.photos.alpha"]
    )

    build_app(
      scheme: "development",
      output_name: "photo_browserAlpha.ipa",
      configuration: "Release-development",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "com.photos.alpha" => "match AdHoc com.photos.alpha",
        }
      }
    )

    delete_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT)
  end

  desc "Deploy a new Alpha (development) version to the Firebase App Distribution"
  lane :deploy_fad_ios_alpha do
    firebase_app_distribution(
      app: "", # TODO: update firebase app number
      ipa_path: "./photo_browserAlpha.ipa",
      groups: "beta-testers",
      release_notes: ""
    )
  end

  desc "Build & sign iOS Beta (staging) for Firebase App Distribution"
  lane :build_fad_ios_beta do
    app_store_connect_api_key()

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./Runner.xcodeproj",
    )

    ensure_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT, TEMP_KEYCHAIN_PASSWORD_DEFAULT)

    match(
      keychain_name: TEMP_KEYCHAIN_NAME_DEFAULT,
      keychain_password: TEMP_KEYCHAIN_PASSWORD_DEFAULT,
      force_for_new_devices: true,
      type: 'adhoc',
      app_identifier: ["com.photos.beta"]
    )

    build_app(
      scheme: "staging",
      output_name: "photo_browserBeta.ipa",
      configuration: "Release-staging",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "com.photos.beta" => "match AdHoc com.photos.beta",
        }
      }
    )

    delete_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT)
  end

  desc "Deploy a new Beta (staging) version to the Firebase App Distribution"
  lane :deploy_fad_ios_beta do
    firebase_app_distribution(
      app: "", # TODO: update firebase app number
      ipa_path: "./photo_browserBeta.ipa",
      groups: "beta-testers",
      release_notes: ""
    )
  end

  desc "Build & sign iOS (production) for Firebase App Distribution"
  lane :build_fad_ios_production do
    app_store_connect_api_key()

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./Runner.xcodeproj",
    )

    ensure_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT, TEMP_KEYCHAIN_PASSWORD_DEFAULT)

    match(
      keychain_name: TEMP_KEYCHAIN_NAME_DEFAULT,
      keychain_password: TEMP_KEYCHAIN_PASSWORD_DEFAULT,
      force_for_new_devices: true,
      type: 'adhoc',
      app_identifier: ["com.photos"]
    )

    build_app(
      scheme: "production",
      output_name: "photo_browser.ipa",
      configuration: "Release-production",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "com.photos" => "match AdHoc com.photos",
        }
      }
    )

    delete_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT)
  end

  desc "Deploy a new Production (production) version to the Firebase App Distribution"
  lane :deploy_fad_ios_production do
    firebase_app_distribution(
      ipa_path: "./photo_browser.ipa",
      groups: "beta-testers",
      release_notes: ""
    )
  end

  desc "Build & sign iOS Production"
  lane :build_ios_production do
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./Runner.xcodeproj",
    )

    ensure_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT, TEMP_KEYCHAIN_PASSWORD_DEFAULT)

    match(
      keychain_name: TEMP_KEYCHAIN_NAME_DEFAULT,
      keychain_password: TEMP_KEYCHAIN_PASSWORD_DEFAULT,
      readonly: true,
      type: 'appstore',
      app_identifier: ["com.photos"]
    )

    build_app(
      scheme: "production",
      output_name: "photo_browser.ipa",
      configuration: "Release-production",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.photos" => "match AppStore com.photos",
        }
      }
    )

    delete_temp_keychain(TEMP_KEYCHAIN_NAME_DEFAULT)
  end

  desc "Deploy iOS Production to AppStore Connect"
  lane :deploy_ios_production do
    app_store_connect_api_key()

    testflight(
      ipa: "./photo_browser.ipa",
      skip_submission: true,
      distribute_external: false,
      skip_waiting_for_build_processing: true,
    )
  end

  desc "Register devices"
  lane :register_distribution_devices do
    app_store_connect_api_key()
    register_devices(
        devices: {
        "SET_A_NAME_HERE" => "UDID_HERE"
        },
  )
  end
end
